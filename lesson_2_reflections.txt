What happens when you initialize a repository? Why do you need to do it?

	This creates a new repository which enables you to begin tracking changes in documents for the purpose of version control. It stores all the metadata related to all the files in (i.e. commited to) the repository. This includes an ID for each commit, which user commited changes, and where and what type of changes occured since the last commit. In essence, it archives a commit history and makes it easy to revert to older versions.

	Without initializing the git repository, we are unable to use git version control for files not added to a repository. Initialization is the first step - creating the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is a layer "between" the working directory and the repository. The value is that it allows you to batch files together in order to commit them together. This makes sense for interdependent or related files. Files not included will not be commted together. Without the staging area, a user might be forced to add all files in the working directory to the git repository at the same time, and this might not be appropriate, as each commit should encapsulate a logical change to the file(s).
	
	Adding a file to the staging area is done with the command git add <filename>.

How can you use the staging area to make sure you have one commit per logical
change?

	Once you have completed your logical change, you can add the relevant file(s) to the staging area and commit them. It's like a buffer area. You can finish the change in one file and add it, then move to the next etc. until all files related to the logical change have been edited and added to the stage. Then they are batch committed with the same commit message and have the same commit ID in the repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When fixing bugs, adding new features or creating updates, you'd want to stay on the master. But for things like experimenting with a new feature, or making a different version of your program (e.g. differen language version), then it can be useful to create a new branch.

	In the example, the instructor Caroline created an "easy-mode" branch in order to experiment with a new mode of the game asteroids.

	The alternative is to try and keep these changes all on the master branch, however if a bug is found in the master, then it would be a lot of overhead to correct it. By keeping the branches separate, it keeps developments on these different paths organized.

How do the diagrams help you visualize the branch structure?

	The diagrams helped me understand the concept of a "detached HEAD". It helps to conceptualize the tree structure of the branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	By merging two branches together, the evolution that each branch experienced independently after the point that they diverged is merged together. The diagram illustrates the fact that even though the branch label is deleted, the new tip has two parents, and all of the parent commits for those two branches are preseved. Now git will display them as interleaved and ordered by date.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Automatic merging is helpful in cutting down on manual merges (it would be unnecessarily time consuming to merge manually every time). However git is not able in every situation to know which parts of a merge file should be kept, and which need to be discarded. By having the option to merge manually, a user can review changes and also check with other users to come to the best possible conclusion and make edits respectively. 